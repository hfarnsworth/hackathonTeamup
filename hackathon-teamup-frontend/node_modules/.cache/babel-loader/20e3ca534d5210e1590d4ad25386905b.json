{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/Development/code/hackathon-teamup/hackathon-teamup-frontend/src/containers/TeamsContainer.js\";\nimport React from 'react';\nimport Team from '../components/Team.js';\nimport SideTeams from '../components/SideTeams.js';\nimport { connect } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\n\nconst TeamsContainer = ({\n  cars\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TeamsContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SideBar, {\n    cars: cars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/cars\",\n    component: ChooseCarPrompt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/cars/:id\",\n    render: routerProps => {\n      const car = cars.find(car => car.id === parseInt(routerProps.match.params.id));\n      return /*#__PURE__*/React.createElement(Car, Object.assign({}, routerProps, {\n        car: car,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 20\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  })));\n}; // long-hand way of writing mstp function:\n// const mapStateToProps = state => {\n//   return {\n//     cars: state.cars\n//   }\n// }\n// I could also use destructuring and arrow function implicit return:\n\n\nconst mapStateToProps = ({\n  cars\n}) => ({\n  cars\n});\n\nexport default connect(mapStateToProps)(CarsContainer);","map":{"version":3,"sources":["/Users/mymac/Development/code/hackathon-teamup/hackathon-teamup-frontend/src/containers/TeamsContainer.js"],"names":["React","Team","SideTeams","connect","Switch","Route","TeamsContainer","cars","ChooseCarPrompt","routerProps","car","find","id","parseInt","match","params","mapStateToProps","CarsContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACjC,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,OAAlB;AAA0B,IAAA,SAAS,EAAGC,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,WAAlB;AAA8B,IAAA,MAAM,EAAGC,WAAD,IAAgB;AACpD,YAAMC,GAAG,GAAGH,IAAI,CAACI,IAAL,CAAUD,GAAG,IAAIA,GAAG,CAACE,EAAJ,KAAWC,QAAQ,CAACJ,WAAW,CAACK,KAAZ,CAAkBC,MAAlB,CAAyBH,EAA1B,CAApC,CAAZ;AACA,0BAAO,oBAAC,GAAD,oBAASH,WAAT;AAAsB,QAAA,GAAG,EAAEC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHF,CADF;AAcH,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMM,eAAe,GAAG,CAAC;AAAET,EAAAA;AAAF,CAAD,MAAe;AAAEA,EAAAA;AAAF,CAAf,CAAxB;;AAEA,eAAeJ,OAAO,CAACa,eAAD,CAAP,CAAyBC,aAAzB,CAAf","sourcesContent":["import React from 'react'\nimport Team from '../components/Team.js'\nimport SideTeams from '../components/SideTeams.js'\nimport { connect } from 'react-redux'\nimport { Switch, Route } from 'react-router-dom'\n\nconst TeamsContainer = ({ cars }) => {\n    return (\n      <div className=\"TeamsContainer\">\n        <SideBar cars={cars} />\n\n        <Switch>\n          <Route exact path=\"/cars\" component={ ChooseCarPrompt }/>\n          <Route exact path=\"/cars/:id\" render={(routerProps)=> {\n            const car = cars.find(car => car.id === parseInt(routerProps.match.params.id))\n            return <Car {...routerProps} car={car}/>\n          }}/>\n        </Switch>\n\n      </div>\n    )\n}\n\n// long-hand way of writing mstp function:\n// const mapStateToProps = state => {\n//   return {\n//     cars: state.cars\n//   }\n// }\n\n// I could also use destructuring and arrow function implicit return:\nconst mapStateToProps = ({ cars }) => ({ cars })\n\nexport default connect(mapStateToProps)(CarsContainer)"]},"metadata":{},"sourceType":"module"}