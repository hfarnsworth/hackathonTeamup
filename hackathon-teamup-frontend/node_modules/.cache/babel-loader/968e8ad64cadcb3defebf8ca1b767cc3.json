{"ast":null,"code":"const API = \"http://localhost:3000/\";\nconst collaboratorsAPI = API + \"collaborators/\";\n\nconst loadCollaborators = collaborators => ({\n  type: \"LOAD_COLLABORATORS\",\n  collaborators\n});\n\nconst addCollaborator = collaborator => ({\n  type: \"ADD_COLLABORATOR\",\n  collaborator\n});\n\nconst removeCollaborator = collaborator => ({\n  type: \"DELETE_COLLABORATOR\",\n  collaborator\n});\n\nconst removeCollaboratorFromTeams = collaborator => ({\n  type: \"DELETE_COLLABORATOR_FROM_TEAMS\",\n  collaborator\n});\n\nexport const fetchCollaborators = () => {\n  return dispatch => {\n    return fetch(collaboratorsAPI).then(resp => resp.json()).then(collaborators => dispatch(loadCollaborators(collaborators)));\n  };\n};\nexport const createCollaborator = (collaborator, history) => {\n  return dispatch => {\n    const body = {\n      collaborator\n    };\n    return fetch(collaboratorsAPI, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(r => r.json()).then(newCollaborator => {\n      if (!newCollaborator.id) {\n        alert(JSON.stringify(newCollaborator));\n      } else {\n        dispatch(addCollaborator({ ...newCollaborator,\n          teams: []\n        }));\n        history.push('/collaborators');\n      }\n    });\n  };\n};\nexport const deleteCollaborator = collaborator => {\n  return dispatch => {\n    return fetch(collaboratorsAPI + collaborator.id, {\n      method: \"DELETE\"\n    }).then(dispatch(removeCollaborator(collaborator))).then(dispatch(removeCollaboratorFromTeams(collaborator)));\n  };\n};","map":{"version":3,"sources":["/Users/mymac/Development/code/hackathon-teamup/hackathon-teamup-frontend/src/actions/collaborators.js"],"names":["API","collaboratorsAPI","loadCollaborators","collaborators","type","addCollaborator","collaborator","removeCollaborator","removeCollaboratorFromTeams","fetchCollaborators","dispatch","fetch","then","resp","json","createCollaborator","history","body","method","headers","JSON","stringify","r","newCollaborator","id","alert","teams","push","deleteCollaborator"],"mappings":"AAAA,MAAMA,GAAG,GAAG,wBAAZ;AACA,MAAMC,gBAAgB,GAAGD,GAAG,GAAG,gBAA/B;;AAEA,MAAME,iBAAiB,GAAGC,aAAa,KAAK;AAAEC,EAAAA,IAAI,EAAE,oBAAR;AAA8BD,EAAAA;AAA9B,CAAL,CAAvC;;AAEA,MAAME,eAAe,GAAGC,YAAY,KAAK;AAAEF,EAAAA,IAAI,EAAE,kBAAR;AAA4BE,EAAAA;AAA5B,CAAL,CAApC;;AAEA,MAAMC,kBAAkB,GAAGD,YAAY,KAAK;AAACF,EAAAA,IAAI,EAAE,qBAAP;AAA8BE,EAAAA;AAA9B,CAAL,CAAvC;;AAEA,MAAME,2BAA2B,GAAGF,YAAY,KAAK;AAACF,EAAAA,IAAI,EAAE,gCAAP;AAAyCE,EAAAA;AAAzC,CAAL,CAAhD;;AAEA,OAAO,MAAMG,kBAAkB,GAAG,MAAM;AACtC,SAAOC,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAACV,gBAAD,CAAL,CACJW,IADI,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,EAEJF,IAFI,CAECT,aAAa,IACjBO,QAAQ,CAACR,iBAAiB,CAACC,aAAD,CAAlB,CAHL,CAAP;AAKD,GAND;AAOD,CARM;AAUP,OAAO,MAAMY,kBAAkB,GAAG,CAACT,YAAD,EAAcU,OAAd,KAA0B;AAC1D,SAAON,QAAQ,IAAI;AACjB,UAAMO,IAAI,GAAG;AACXX,MAAAA;AADW,KAAb;AAGA,WAAOK,KAAK,CAACV,gBAAD,EAAmB;AAC7BiB,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,kBAAU;AAFH,OAFoB;AAM7BF,MAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AANuB,KAAnB,CAAL,CAQJL,IARI,CAQCU,CAAC,IAAIA,CAAC,CAACR,IAAF,EARN,EASJF,IATI,CASCW,eAAe,IAAI;AACvB,UAAI,CAACA,eAAe,CAACC,EAArB,EAAyB;AACvBC,QAAAA,KAAK,CAACL,IAAI,CAACC,SAAL,CAAeE,eAAf,CAAD,CAAL;AACD,OAFD,MAEO;AACLb,QAAAA,QAAQ,CAACL,eAAe,CAAC,EACvB,GAAGkB,eADoB;AAEvBG,UAAAA,KAAK,EAAE;AAFgB,SAAD,CAAhB,CAAR;AAIAV,QAAAA,OAAO,CAACW,IAAR,CAAa,gBAAb;AACD;AACF,KAnBI,CAAP;AAoBD,GAxBD;AAyBD,CA1BM;AA4BP,OAAO,MAAMC,kBAAkB,GAAGtB,YAAY,IAAI;AAChD,SAAOI,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAACV,gBAAgB,GAAGK,YAAY,CAACkB,EAAjC,EAAqC;AAC/CN,MAAAA,MAAM,EAAE;AADuC,KAArC,CAAL,CAGNN,IAHM,CAGDF,QAAQ,CAACH,kBAAkB,CAACD,YAAD,CAAnB,CAHP,EAINM,IAJM,CAIDF,QAAQ,CAACF,2BAA2B,CAACF,YAAD,CAA5B,CAJP,CAAP;AAKD,GAND;AAOD,CARM","sourcesContent":["const API = \"http://localhost:3000/\"\nconst collaboratorsAPI = API + \"collaborators/\"\n\nconst loadCollaborators = collaborators => ({ type: \"LOAD_COLLABORATORS\", collaborators })\n\nconst addCollaborator = collaborator => ({ type: \"ADD_COLLABORATOR\", collaborator })\n\nconst removeCollaborator = collaborator => ({type: \"DELETE_COLLABORATOR\", collaborator })\n\nconst removeCollaboratorFromTeams = collaborator => ({type: \"DELETE_COLLABORATOR_FROM_TEAMS\", collaborator })\n\nexport const fetchCollaborators = () => {\n  return dispatch => {\n    return fetch(collaboratorsAPI)\n      .then(resp => resp.json())\n      .then(collaborators => \n        dispatch(loadCollaborators(collaborators))\n      )\n  }\n}\n\nexport const createCollaborator = (collaborator,history) => {\n  return dispatch => {\n    const body = {\n      collaborator\n    }\n    return fetch(collaboratorsAPI, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    })\n      .then(r => r.json())\n      .then(newCollaborator => {\n        if (!newCollaborator.id) {\n          alert(JSON.stringify(newCollaborator))\n        } else {\n          dispatch(addCollaborator({\n            ...newCollaborator,\n            teams: [],\n          }))\n          history.push('/collaborators')\n        }\n      })\n  }\n}\n\nexport const deleteCollaborator = collaborator => {\n  return dispatch => {\n    return fetch(collaboratorsAPI + collaborator.id, {\n      method: \"DELETE\"\n    })\n    .then(dispatch(removeCollaborator(collaborator)))\n    .then(dispatch(removeCollaboratorFromTeams(collaborator)))\n  }\n}"]},"metadata":{},"sourceType":"module"}